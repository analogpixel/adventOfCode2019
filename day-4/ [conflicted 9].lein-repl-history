(ns day-4.core :reload-all)
(ns day-4.core :reload-)
(ns day-4.core :reload)
(use 'day-4.core :reload)
(check-num 1234)
(use 'day-4.core :reload)
(check-num 1234)
(use 'day-4.core :reload)
(check-num 1234)
(cons [1 2 3] 4)
(cons 4 [1 2 3] )
(use 'day-4.core :reload)
(check-num 1234)
(use 'day-4.core :reload)
(check-num 1234)
(quot 109 10)
(use 'day-4.core :reload)
(quot 109 10)
(check-num 1234)
(use 'day-4.core :reload)
(num-to-list 123456)
(use 'day-4.core :reload)
(def a (1 2 3)
)
a
(def a (1 2 3))
(def a [1 2 3])
a
(pop a)
(pop 'a)
(pop '(a))
'(pop a)
(pop `a)
(use 'day-4.core :reload)
(check-num [1 2 3 4 5])
(use 'day-4.core :reload)
(check-num [1 1 1 1 1])
(use 'day-4.core :reload)
(check-num [1 1 1 1 1])
(use 'day-4.core :reload)
(check-num [1 1 1 1 1])
(use 'day-4.core :reload)
(check-num [1 1 1 1 1])
(use 'day-4.core :reload)
(check-num [1 1 1 1 1])
(use 'day-4.core :reload)
(check-num [1 1 1 1 1])
(use 'day-4.core :reload)
(check-num [1 1 1 1 1])
(check-num [1 0 1 1 1])
(check-num [1 2 1 1 1])
(or false true)
(use 'day-4.core :reload)
(check-num [1 2 1 1 1])
(check-num [1 1 2 3 5])
(check-num [2 2 3 4 5 0])
(filter (true true false))
(filter identity (true true false true))
(filter identity '(true true false true))
(count (filter identity '(true true false true)))
(check-num (num-to-list 165432))
(check-num (num-to-list 165433))
(check-num (num-to-list 166779))
(check-num (num-to-list 1111166779))
(use 'day-4.core :reload)
(check-num (num-to-list 1111166779))
(map #(check-num (num-to-list 1111166779)) range(1000000, 4000000))
(map #(check-num (num-to-list %1)) range(1000000, 4000000) )
(map #(check-num (num-to-list %1)) range(1000000, 4000000) ))
(use 'day-4.core :reload)
(check-num2 [1 2 3 4 5 6])
(check-num2 [1 2 3 4 5 5])
(check-num2 [1 2 3 4 5 5 5])
(check-num2 [1 2 3 4 5 5 ])
(use 'day-4.core :reload)
(check-num2 [1 2 3 4 5 5 ])
(use 'day-4.core :reload)
(check-num2 [1 2 3 4 5 5 ])
(use 'day-4.core :reload)
(check-num2 [1 2 3 4 5 5 ])
(use 'day-4.core :reload)
(check-num2 [1 2 3 4 5 5 ])
(use 'day-4.core :reload)
(check-num2 [1 2 3 4 5 5 ])
(check-num2 [1 2 3 4 5 5 5])
(check-num2 [1 2 2 2 3 4 5 5 ])
(check-num2 [1 2 2 3 4 5 5 ])
(check-num2 [1 2 2 3 4 5 5 5])
(use 'day-4.core :reload)
(check-num2 [1 2 2 3 4 5 5 5])
(check-num2 [1 2 2 2 4 5 5 5])
(check-num2 [1 2 2 2 2 4 5 5 5])
(check-num2 [1 2 2 2 2 4 5 5 ])
